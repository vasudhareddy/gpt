import java.util.UUID;
import java.util.List;

public class ModernMapper {

    private static final String DEFAULT_CLIENT_NUMBER = "708";

    public Object createRequestDocument(Request serviceRequest) {
        LoanSearchRequest request = (LoanSearchRequest) serviceRequest;
        LoanSearchRead message = new LoanSearchRead();

        // Add request context
        RequestContextType context = addContext(message);

        // Add security credentials
        addCredentials(context, DEFAULT_CLIENT_NUMBER);
        message.setRequestContext(context);

        // Configure request body
        LoanSearchRead.LoanSearchReadRq loanSearchReadRq = new LoanSearchRead.LoanSearchReadRq();
        message.setLoanSearchReadRq(loanSearchReadRq);

        LoanSearchRead.LoanSearchReadRq.RequestBody body = new LoanSearchRead.LoanSearchReadRq.RequestBody();
        loanSearchReadRq.setRequestBody(body);

        body.setClientId(DEFAULT_CLIENT_NUMBER);
        body.setMultiClientSearchFlag(true);

        // Configure search criteria
        SearchCriteriaType criteria = new SearchCriteriaType();
        body.setSearchCriteria(criteria);

        if (request instanceof LoanSearchByAccountRequest accountRequest) {
            var searchInfo = new SearchCriteriaType.IdentifierSearchInfo();
            searchInfo.setLoanIdentifier(accountRequest.getLoanNumber());
            criteria.setIdentifierSearchInfo(searchInfo);
        } else if (request instanceof LoanSearchByNameSSNRequest nameSSNRequest) {
            var nameSearch = configureNameSearch(nameSSNRequest);
            criteria.setNameSearchInfo(nameSearch);
        } else if (request instanceof LoanSearchBySSNRequest ssnRequest) {
            var ssnSearch = configureSSNSearch(ssnRequest);
            criteria.setNameSearchInfo(ssnSearch);
        }

        return message;
    }

    public Response parseResponseDocument(Request serviceRequest, Object responseDocument) {
        LoanSearchReadResponse document = (LoanSearchReadResponse) responseDocument;
        LoanSearchResponse response = new LoanSearchResponse();
        LoanSearchReadResponse.LoanSearchReadRs message = document.getLoanSearchReadRs();

        ResponseStatusType status = message.getResponseHeader().getStatus();
        response.setStatus(status.getCode());

        if ("success".equalsIgnoreCase(status.getCode())) {
            processLoanSearchResults(message, response);
        } else {
            status.getErrorMessage().forEach(errorMessage -> response.addErrorMessage(errorMessage.getValue()));
        }

        return response;
    }

    private void processLoanSearchResults(LoanSearchReadResponse.LoanSearchReadRs message, LoanSearchResponse response) {
        var searchResults = message.getResponseBody().getLoanSearchResults();
        if (searchResults != null) {
            searchResults.getLoanSearchResult().forEach(loan -> {
                var result = new LoanSearchResponseResult();
                result.setClientNumber(loan.getClientId());
                result.setLoanNumber(loan.getLoanNumber());
                processNameDetails(loan, result);
                processAddressDetails(loan, result);
                response.addResult(result);
            });
        }
    }

    private void processNameDetails(LoanSearchResultType loan, LoanSearchResponseResult result) {
        loan.getName().forEach(name -> {
            if (name.getBorrowerIndicator() == BorrowerIndicatorType.BORROWER) {
                result.setBorrowerFirstName(name.getFirstName());
                result.setBorrowerLastName(name.getLastName());
            } else if (name.getBorrowerIndicator() == BorrowerIndicatorType.CO_BORROWER) {
                result.setCoBorrowerFirstName(name.getFirstName());
                result.setCoBorrowerLastName(name.getLastName());
            }
        });
    }

    private void processAddressDetails(LoanSearchResultType loan, LoanSearchResponseResult result) {
        loan.getAddress().stream()
            .filter(address -> AddressType.PROPERTY.equals(address.getAddressType()))
            .forEach(address -> {
                result.setPropertyStreet(address.getStreetName());
                result.setPropertyCity(address.getCityName());
                result.setPropertyState(address.getStateAbbreviation());
                result.setPropertyZip(address.getPostalCode());
            });
    }

    private NameSearchType configureNameSearch(LoanSearchByNameSSNRequest request) {
        var nameSearch = new NameSearchType();
        nameSearch.setBorrowerIndicator(BorrowerIndicatorType.EITHER_BORROWER);
        nameSearch.setFirstName(request.getFirstName());
        nameSearch.setLastName(request.getLastName());
        nameSearch.setSocialSecurityNumber("**" + request.getPartialSSN());
        return nameSearch;
    }

    private NameSearchType configureSSNSearch(LoanSearchBySSNRequest request) {
        var ssnSearch = new NameSearchType();
        ssnSearch.setBorrowerIndicator(BorrowerIndicatorType.EITHER_BORROWER);
        ssnSearch.setSocialSecurityNumber(request.getFullSSN());
        return ssnSearch;
    }

    private RequestContextType addContext(LoanSearchRead message) {
        RequestContextType context = new RequestContextType();
        message.setRequestContext(context);

        context.setCorrelationId(UUID.randomUUID().toString());
        context.setCompany(configuration.getProperty(MWSGateway.PROPERTY_SERVICE_COMPANY));
        context.setUserId(configuration.getProperty(MWSGateway.PROPERTY_SERVICE_ID));
        context.setOriginator(configuration.getProperty(MWSGateway.PROPERTY_SERVICE_ORIGINATOR));
        context.setProvider(configuration.getProperty(MWSGateway.PROPERTY_SERVICE_PROVIDER));
        context.setApplicationId(configuration.getProperty(MWSGateway.PROPERTY_APPLICATION_ID));

        return context;
    }

    private RequestContextType.Credentials addCredentials(RequestContextType context, String clientNumber) {
        var serviceAccount = serviceAccountFactory.createServiceAccount(clientNumber);
        var credentials = new RequestContextType.Credentials();
        context.setCredentials(credentials);

        var credentialList = new RequestContextType.Credentials.MSPCredentialList();
        credentials.setMSPCredentialList(credentialList);

        var credential = new MSPSystemCredentialType();
        credentialList.add(credential);

        credential.setClientId(configuration.getProperty(MWSGateway.PROPERTY_MSP_CLIENT_ID));
        credential.setRACFUser(serviceAccount.getUserName());
        credential.setRACFPassword(serviceAccount.getPassword());

        return credentials;
    }
}
