public void populateTransactionCodeDescription() {
    if (LOGGER.isInfoEnabled()) {
        LOGGER.info(ServiceConstants.POPULATE + TransactionCd.class);
    }
    try {
        long startTime = System.currentTimeMillis();

        // Step 1: Fetch all transaction codes from the database
        List<TransactionCd> transactionCodeList = touchdownDAO.getTransactionCodeDescriptions();

        // Step 2: Evict all related cache entries
        evictAllTransactionCodeCache();

        // Step 3: Cache all the fetched data
        cacheAllTransactionCodeDescriptions(transactionCodeList);

        // Log the total time taken
        if (LOGGER.isInfoEnabled()) {
            LOGGER.info("Time taken to populate transaction codes: " + (System.currentTimeMillis() - startTime) + " ms");
        }

    } catch (Exception ex) {
        LOGGER.error(ServiceConstants.ERROR_MESSAGE, ex);
    }
}

private void evictAllTransactionCodeCache() {
    try {
        String pattern = "getTransactionCodeDescription*"; // Cache key pattern to match all related entries
        Set<String> keys = redisTemplate.keys(pattern);

        if (keys != null && !keys.isEmpty()) {
            redisTemplate.delete(keys);
            LOGGER.info("Evicted all cache entries for transaction codes.");
        } else {
            LOGGER.info("No cache entries found for transaction codes.");
        }
    } catch (Exception ex) {
        LOGGER.error("Error while evicting transaction code cache", ex);
    }
}

private void cacheAllTransactionCodeDescriptions(List<TransactionCd> transactionCodeList) {
    try {
        for (TransactionCd tranCode : transactionCodeList) {
            Integer transactionCode = tranCode.getTransactionCode();

            // Generate cache key
            String cacheKey = "getTransactionCodeDescription" + ServiceConstants.WORD_SEPARATE + transactionCode;

            // Cache the transaction code description
            redisTemplate.opsForValue().set(cacheKey, tranCode);

            if (LOGGER.isInfoEnabled()) {
                LOGGER.info("Cached transaction code: " + transactionCode);
            }
        }
    } catch (Exception ex) {
        LOGGER.error("Error while caching transaction code descriptions", ex);
    }
}
