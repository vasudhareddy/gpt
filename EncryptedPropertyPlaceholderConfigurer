import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;
import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
import org.springframework.core.io.ClassPathResource;

import java.util.Properties;

public class EncryptedPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer {

    private PooledPBEStringEncryptor encryptor;

    public EncryptedPropertyPlaceholderConfigurer() {
        this.encryptor = new PooledPBEStringEncryptor();
        SimpleStringPBEConfig config = new SimpleStringPBEConfig();
        config.setPassword("your-secret-key");  // Replace with secure config (e.g., env variables)
        config.setAlgorithm("PBEWithMD5AndDES");
        this.encryptor.setConfig(config);
    }

    @Override
    protected String convertPropertyValue(String originalValue) {
        // Check if the property is encrypted with ENC(...)
        if (originalValue.startsWith("ENC(") && originalValue.endsWith(")")) {
            String encryptedValue = originalValue.substring(4, originalValue.length() - 1);
            return encryptor.decrypt(encryptedValue);
        }
        return originalValue;
    }

    @Override
    protected Properties mergeProperties() throws Exception {
        // Load all properties from multiple files
        Properties mergedProperties = super.mergeProperties();

        // Decrypt only the properties from application-local.properties
        if (getLocations() != null) {
            for (ClassPathResource resource : getLocations()) {
                if (resource.getPath().contains("application-local.properties")) {
                    Properties localProperties = new Properties();
                    localProperties.load(resource.getInputStream());

                    for (String key : localProperties.stringPropertyNames()) {
                        String value = localProperties.getProperty(key);
                        if (value != null && value.startsWith("ENC(") && value.endsWith(")")) {
                            String decryptedValue = encryptor.decrypt(value.substring(4, value.length() - 1));
                            mergedProperties.put(key, decryptedValue);  // Replace with decrypted value
                        }
                    }
                }
            }
        }

        return mergedProperties;
    }
}
