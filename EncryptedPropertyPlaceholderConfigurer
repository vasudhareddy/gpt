import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;
import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
import org.springframework.core.io.ClassPathResource;

import java.io.IOException;
import java.util.Properties;

public class EncryptedPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer {

    private PooledPBEStringEncryptor encryptor;

    public EncryptedPropertyPlaceholderConfigurer() {
        // Initialize the encryptor
        this.encryptor = new PooledPBEStringEncryptor();
        SimpleStringPBEConfig config = new SimpleStringPBEConfig();
        config.setPassword("your-secret-key");  // Replace with secure password handling (e.g., environment variable)
        config.setAlgorithm("PBEWithMD5AndDES");
        this.encryptor.setConfig(config);
    }

    @Override
    protected Properties mergeProperties() throws IOException {
        // Merge properties from all specified property files
        Properties mergedProperties = super.mergeProperties();

        // Load and decrypt properties from application-local.properties
        ClassPathResource localPropertiesResource = new ClassPathResource("application-local.properties");
        if (localPropertiesResource.exists()) {
            Properties localProperties = new Properties();
            localProperties.load(localPropertiesResource.getInputStream());

            // Decrypt encrypted properties in application-local.properties
            for (String key : localProperties.stringPropertyNames()) {
                String value = localProperties.getProperty(key);
                if (value != null && value.startsWith("ENC(") && value.endsWith(")")) {
                    String encryptedValue = value.substring(4, value.length() - 1);
                    String decryptedValue = encryptor.decrypt(encryptedValue);
                    mergedProperties.put(key, decryptedValue);  // Replace with decrypted value
                }
            }
        }

        return mergedProperties;
    }
}
