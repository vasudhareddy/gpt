import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.cache.CacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import org.springframework.mock.env.MockEnvironment;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.junit.jupiter.api.extension.ExtendWith;

import java.time.Duration;

@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
public class RedisCacheConfigTest {

    @InjectMocks
    private RedisCacheConfig redisCacheConfig;

    @Mock
    private MockEnvironment environment;

    @BeforeEach
    public void setUp() {
        when(environment.getProperty("redis.host")).thenReturn("redis-11512.cache-temr-n-02.rlec.wellsfargo.net");
        when(environment.getProperty("redis.port")).thenReturn("11512");
        when(environment.getProperty("redis.password")).thenReturn("somepassword");
    }

    @Test
    public void testRedisConnectionFactory() {
        // Arrange
        RedisStandaloneConfiguration redisConfig = new RedisStandaloneConfiguration();
        redisConfig.setHostName("redis-11512.cache-temr-n-02.rlec.wellsfargo.net");
        redisConfig.setPort(11512);
        redisConfig.setPassword("somepassword");

        // Act
        RedisConnectionFactory redisConnectionFactory = redisCacheConfig.redisConnectionFactory();

        // Assert
        assertNotNull(redisConnectionFactory, "The RedisConnectionFactory should not be null.");
        assertTrue(redisConnectionFactory instanceof LettuceConnectionFactory, "The factory should be a LettuceConnectionFactory instance.");
    }

    @Test
    public void testCacheManager() {
        // Arrange
        RedisConnectionFactory redisConnectionFactory = mock(RedisConnectionFactory.class);

        // Act
        CacheManager cacheManager = redisCacheConfig.cacheManager(redisConnectionFactory);

        // Assert
        assertNotNull(cacheManager, "The CacheManager should not be null.");
        assertTrue(cacheManager instanceof RedisCacheManager, "CacheManager should be an instance of RedisCacheManager.");

        RedisCacheManager redisCacheManager = (RedisCacheManager) cacheManager;
        RedisCacheConfiguration cacheConfig = redisCacheManager.getCacheConfigurationFor("touchdownLookupCache");

        assertNotNull(cacheConfig, "CacheConfiguration should not be null.");
        assertEquals(Duration.ofSeconds(864000), cacheConfig.getTtl(), "TTL should be 864000 seconds (10 days).");

        RedisSerializationContext.SerializationPair<String> keySerializer = cacheConfig.getKeySerializationPair();
        assertTrue(keySerializer.getWriter() instanceof StringRedisSerializer, "Key Serializer should be StringRedisSerializer.");
    }
}
