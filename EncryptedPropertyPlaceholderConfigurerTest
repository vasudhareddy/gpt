import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.ClassPathResource;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class EncryptedPropertyPlaceholderConfigurerTest {

    @Mock
    private PooledPBEStringEncryptor encryptor;

    @InjectMocks
    private EncryptedPropertyPlaceholderConfigurer configurer;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testMergePropertiesWithDecryptedValues() throws IOException {
        // Mock the encrypted value and decrypted result
        String encryptedValue = "ENC(encryptedValue)";
        String decryptedValue = "decryptedValue";

        // Mock the behavior of the encryptor
        when(encryptor.decrypt("encryptedValue")).thenReturn(decryptedValue);

        // Mock the ClassPathResource and the InputStream for application-local.properties
        ClassPathResource mockResource = mock(ClassPathResource.class);
        InputStream mockInputStream = new ByteArrayInputStream("db.password=ENC(encryptedValue)".getBytes());

        // Mock that the file exists and return the InputStream
        when(mockResource.exists()).thenReturn(true);
        when(mockResource.getInputStream()).thenReturn(mockInputStream);

        // Spy on the configurer and mock the resource to simulate loading the properties file
        configurer = spy(new EncryptedPropertyPlaceholderConfigurer());
        doReturn(mockResource).when(configurer).getLocalPropertiesResource(); // This directly returns the mocked resource

        // Run the mergeProperties method
        Properties mergedProps = configurer.mergeProperties();

        // Verify that the encrypted value was decrypted
        verify(encryptor).decrypt("encryptedValue");

        // Check that the decrypted property was put into merged properties
        assertEquals("decryptedValue", mergedProps.getProperty("db.password"));
    }

    @Test
    public void testMergePropertiesWithNonEncryptedValues() throws IOException {
        // Mock the ClassPathResource and the InputStream for non-encrypted properties
        ClassPathResource mockResource = mock(ClassPathResource.class);
        InputStream mockInputStream = new ByteArrayInputStream("db.username=myUser".getBytes());

        // Mock that the file exists and return the InputStream
        when(mockResource.exists()).thenReturn(true);
        when(mockResource.getInputStream()).thenReturn(mockInputStream);

        // Spy on the configurer and mock the resource
        configurer = spy(new EncryptedPropertyPlaceholderConfigurer());
        doReturn(mockResource).when(configurer).getLocalPropertiesResource();

        // Run the mergeProperties method
        Properties mergedProps = configurer.mergeProperties();

        // Check that non-encrypted property is correctly added
        assertEquals("myUser", mergedProps.getProperty("db.username"));
    }

    @Test
    public void testMergePropertiesFileDoesNotExist() throws IOException {
        // Mock the ClassPathResource to simulate the file not existing
        ClassPathResource mockResource = mock(ClassPathResource.class);
        when(mockResource.exists()).thenReturn(false);

        // Spy on the configurer and mock the resource
        configurer = spy(new EncryptedPropertyPlaceholderConfigurer());
        doReturn(mockResource).when(configurer).getLocalPropertiesResource();

        // Run the mergeProperties method
        Properties mergedProps = configurer.mergeProperties();

        // Verify that no properties are returned when the file does not exist
        assertTrue(mergedProps.isEmpty());
    }
}
