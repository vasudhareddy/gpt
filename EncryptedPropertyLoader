import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

import javax.annotation.PostConstruct;
import java.io.IOException;
import java.util.Properties;

@Configuration
public class EncryptedPropertyLoader {

    @Autowired
    private ConfigurableEnvironment environment;

    @Autowired
    private PooledPBEStringEncryptor encryptor;

    @PostConstruct
    public void loadEncryptedProperties() throws IOException {
        Resource resource = new ClassPathResource("application-local.properties");
        Properties properties = new Properties();
        properties.load(resource.getInputStream());

        Properties decryptedProperties = new Properties();
        for (String key : properties.stringPropertyNames()) {
            String value = properties.getProperty(key);
            if (value != null && value.startsWith("ENC(") && value.endsWith(")")) {
                String encryptedValue = value.substring(4, value.length() - 1);
                String decryptedValue = encryptor.decrypt(encryptedValue);
                decryptedProperties.put(key, decryptedValue);
            } else {
                decryptedProperties.put(key, value);
            }
        }

        // Add decrypted properties to the environment
        environment.getPropertySources().addLast(new org.springframework.core.env.PropertiesPropertySource("decryptedProps", decryptedProperties));
    }
}
