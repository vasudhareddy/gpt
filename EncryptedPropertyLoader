import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.io.ClassPathResource;

import java.io.IOException;
import java.util.Properties;

@Configuration
public class EncryptedPropertyConfig {

    @Autowired
    private PooledPBEStringEncryptor encryptor;

    @Bean
    public static PropertySourcesPlaceholderConfigurer propertyConfigurer(PooledPBEStringEncryptor encryptor) throws IOException {
        PropertySourcesPlaceholderConfigurer configurer = new PropertySourcesPlaceholderConfigurer();
        Properties properties = new Properties();

        // Load properties from application-local.properties
        ClassPathResource resource = new ClassPathResource("application-local.properties");
        properties.load(resource.getInputStream());

        Properties decryptedProperties = new Properties();

        for (String key : properties.stringPropertyNames()) {
            String value = properties.getProperty(key);
            if (value != null && value.startsWith("ENC(") && value.endsWith(")")) {
                String encryptedValue = value.substring(4, value.length() - 1);
                String decryptedValue = encryptor.decrypt(encryptedValue);
                decryptedProperties.put(key, decryptedValue);
            } else {
                decryptedProperties.put(key, value);
            }
        }

        // Apply decrypted properties
        configurer.setProperties(decryptedProperties);
        return configurer;
    }
}
